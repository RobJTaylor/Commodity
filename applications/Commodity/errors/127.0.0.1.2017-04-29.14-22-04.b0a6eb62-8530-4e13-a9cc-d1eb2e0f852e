(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'None'"
p3
sS'layer'
p4
S'C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\applications\\Commodity\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    product = db.products\n    productName = product.product_name\n\n    product1Name = ""\n    product1URL = ""\n    product1Image = ""\n    product1Tag1 = ""\n    product1Tag2 = ""\n    product1Tag3 = ""\n\n    product2Name = ""\n    product2URL = ""\n    product2Image = ""\n    product2Tag1 = ""\n    product2Tag2 = ""\n    product2Tag3 = ""\n\n    product3Name = ""\n    product3URL = ""\n    product3Image = ""\n    product3Tag1 = ""\n    product3Tag2 = ""\n    product3Tag3 = ""\n\n    productIDURL = [0] * 4\n    reviewerName = [0] * 4\n    reviewName = [0] * 4\n    reviewContent = [0] * 4\n    reviewRating = [0] * 4\n    reviewTimeStamp = [0] * 4\n    reviewerPicture = [0] * 4\n    reviewID = [0] * 4\n    o = 0\n\n    i = 0\n    for row in db().select(db.products.ALL, limitby=(0,3), orderby=~db.products.time_stamp):\n        if i == 0:\n            product1Name = row.product_name\n            product1Image = row.product_image\n            product1URL = URL(\'viewProduct\', vars=dict(productID=row.id))\n            product1Tag1 = row.tag_1\n            product1Tag2 = row.tag_2\n            product1Tag3 = row.tag_3\n            i = i + 1\n        elif i == 1:\n            product2Name = row.product_name\n            product2Image = row.product_image\n            product2URL = URL(\'viewProduct\', vars=dict(productID=row.id))\n            product2Tag1 = row.tag_1\n            product2Tag2 = row.tag_2\n            product2Tag3 = row.tag_3\n            i = i + 1\n        elif i == 2:\n            product3Name = row.product_name\n            product3Image = row.product_image\n            product3URL = URL(\'viewProduct\', vars=dict(productID=row.id))\n            product3Tag1 = row.tag_1\n            product3Tag2 = row.tag_2\n            product3Tag3 = row.tag_3\n            i = i + 1\n\n    loggedIn = 0\n\n    if not auth.is_logged_in():\n        loggedIn = 0\n    else:\n        loggedIn = 1\n        db.reviews.reviewer_name.default = auth.user.first_name\n        db.reviews.reviewer_id.default = auth.user.id\n\n    for row in db().select(db.reviews.ALL, limitby=(0,4), orderby=~db.reviews.review_rating):\n        productIDURL[o] = URL(\'viewProduct\', vars=dict(productID=row.products_id))\n        reviewerName[o] = row.reviewer_name\n        reviewName[o] = row.review_name\n        reviewContent[o] = row.review_content\n        reviewRating[o] = row.review_rating\n        reviewTimeStamp[o] = row.time_stamp\n        reviewID[o] = row.id\n        for row in db(db.auth_user.id == row.reviewer_id).select():\n            reviewerPicture[o] = row.profile_image\n        o = o + 1\n    return locals()\n\ndef newProduct():\n    form = SQLFORM(db.products).process()\n    return locals()\n\ndef addRetailer():\n    form = SQLFORM(db.retailers).process()\n    return locals()\n\ndef viewAllProducts():\n    rows = db(db.products).select()\n    return locals()\n\ndef viewProduct():\n    product = db.products\n    productID = product.id\n    queryID = request.vars.productID\n    query = productID == queryID\n    search = db(query)\n    rows = search.select()\n\n    name = ""\n    image = ""\n    description = ""\n    price = ""\n    tag1 = ""\n    tag2 = ""\n    tag3 = ""\n    timestamp = ""\n    i = 0\n\n    for row in rows:\n        name = row.product_name\n        image = row.product_image\n        description = row.product_description\n        price = row.product_price\n        tag1 = row.tag_1\n        tag2 = row.tag_2\n        tag3 = row.tag_3\n        timestamp = row.time_stamp\n    for row in db().select(db.review_rate_link.review_id,db.review_rate_link.user_id):\n        i = i + 1\n\n    if i == 0:\n        resultsArray = [0] * 1\n    else:\n        resultsArray = [0] * i\n\n    i = 0\n\n    for row in db().select(db.review_rate_link.review_id,db.review_rate_link.user_id):\n        i = i + 1\n\n    reviews = db.reviews\n    rProductID = reviews.products_id\n    query = rProductID == request.vars.productID\n    search = db(query)\n\n    newRows = search.select()\n\n    loggedIn = 0\n\n    if not auth.is_logged_in():\n        loggedIn = 0\n    else:\n        loggedIn = 1\n        db.reviews.reviewer_name.default = auth.user.first_name\n        db.reviews.reviewer_id.default = auth.user.id\n\n    db.reviews.products_id.default = request.vars.productID\n    db.reviews.review_rating.default = 0\n    form = SQLFORM(db.reviews).process()\n\n    return locals()\n\ndef upvote():\n    reviews = db.reviews\n    reviewID = reviews.id\n    query = reviewID == request.args[0]\n    search = db(query)\n    rows = search.select()\n\n    for row in rows:\n        reviewRating = row.review_rating\n        reviewRating = reviewRating + 1\n        row.update_record(review_rating=reviewRating)\n\n    reviewID = request.args[0]\n    userID = auth.user.id\n    db.review_rate_link.insert(user_id=userID,review_id=reviewID)\n\n    for row in db(db.auth_user.id == userID, db.auth_user.reviewer_score).select():\n        reviewerScore = row.reviewer_score\n        if reviewerScore == None:\n            reviewerScore = 0\n        reviewerScore = reviewerScore + 1\n        row.update_record(reviewer_score=reviewerScore)\n\n    return locals()\n\ndef downvote():\n    reviews = db.reviews\n    reviewID = reviews.id\n    query = reviewID == request.args[0]\n    search = db(query)\n    rows = search.select()\n\n    for row in rows:\n        reviewRating = row.review_rating\n        reviewRating = reviewRating - 1\n        row.update_record(review_rating=reviewRating)\n\n    reviewID = request.args[0]\n    userID = auth.user.id\n    db.review_rate_link.insert(user_id=userID,review_id=reviewID)\n\n    for row in db(db.auth_user.id == userID, db.auth_user.reviewer_score).select():\n        reviewerScore = row.reviewer_score\n        if reviewerScore == None:\n            reviewerScore = 0\n        reviewerScore = reviewerScore - 1\n        row.update_record(reviewer_score=reviewerScore)\n\n    return locals()\n\ndef searchProduct():\n    form = FORM(\'\',\n              DIV(LABEL(\'Product Name:\',_class=\'control-label col-sm-3\'),\n                  DIV(INPUT(_name=\'productName\', _class=\'form-control string\',requires=IS_NOT_EMPTY()),\n                      _class=\'col-sm-9\'), _class=\'form-group\'),\n\n              DIV(LABEL(\'Product Tag:\',_class=\'control-label col-sm-3\'),\n                  DIV(INPUT(_name=\'tagOne\', _class=\'form-control string\'),\n                      _class=\'col-sm-9\'), _class=\'form-group\'),\n\n              DIV(LABEL(\'Product Tag:\',_class=\'control-label col-sm-3\'),\n                  DIV(INPUT(_name=\'tagTwo\', _class=\'form-control string\'),\n                      _class=\'col-sm-9\'), _class=\'form-group\'),\n\n              DIV(LABEL(\'Product Tag:\',_class=\'control-label col-sm-3\'),\n                  DIV(INPUT(_name=\'tagThree\', _class=\'form-control string\'),\n                      _class=\'col-sm-9\'), _class=\'form-group\'),\n\n              DIV(DIV(INPUT(_type=\'submit\', _class="btn btn-primary"),\n                      _class=\'col-sm-9 col-sm-offset-3\'), _class=\'form-group\'))\n    if form.accepts(request,session):\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n\n    if request.vars.field1:\n        productName = [0] * 20\n        productDescription = [0] * 20\n        productImage = [0] * 20\n        productTag1 = [0] * 20\n        productTag2 = [0] * 20\n        productTag3 = [0] * 20\n        statementBuild = ""\n        searchProduct = request.vars.field1\n        if searchProduct:\n            statementBuild = "(db.products.product_name==" + searchProduct + ")"\n\n        searchTagOne = request.vars.field2\n        if searchTagOne:\n            statementBuild = statementBuild +" & (db.products.tag_1==" + searchTagOne + ")"\n\n        searchTagTwo = request.vars.field3\n        if searchTagTwo:\n            statementBuild = statementBuild +" & (db.products.tag_2==" + searchTagTwo + ")"\n\n        searchTagThree = request.vars.field4\n        if searchTagThree:\n            statementBuild = statementBuild +" & (db.products.tag_3==" + searchTagThree + ")"\n\n        i = 0\n        for row in db(statementBuild).select(db.products.ALL, limitby=(0,19)):\n            productName [i] = row.product_name\n            productDescription [i] = row.product_description\n            productImage [i] = row.product_image\n            productTag1 [i] = row.tag_1\n            productTag2 [i] = row.tag_2\n            productTag3 [i] = row.tag_3\n    return locals()\n\ndef getReviews():\n    review = db.reviews\n    reviewID = review.reviewer_id\n    query = reviewID == auth.user.id\n    search = db(query)\n\n    rows = search.select()\n\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(viewProduct)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\applications\\Commodity\\controllers/default.py", line 335, in <module>\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\applications\\Commodity\\controllers/default.py", line 121, in viewProduct\n    rows = search.select()\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\robta\\OneDrive\\Documents\\GitHub\\Commodity\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'None\'\n'
p11
s.